# Add Walmart Transaction Support with Multi-Transaction Order Matching

## Overview

This PR adds comprehensive Walmart integration to the YNAB Transaction Updater, enabling automatic matching and updating of Walmart transactions alongside existing Amazon support. The implementation uses browser automation via Playwright to fetch Walmart order history and includes intelligent multi-transaction matching for orders that are split into multiple credit card charges.

## Key Features

### üõí Walmart Order Fetching
- **Browser Automation**: Uses Playwright to fetch order history from walmart.com
- **Headless Operation**: Runs in headless mode for automated processing
- **Smart Filtering**: Only processes "Delivered" orders within the lookback period
- **Charge History Extraction**: Extracts "Final Order Charges" while ignoring "Temporary Hold" charges
- **Robust Error Handling**: Includes retry logic, timeout handling, and comprehensive logging

### üîó Multi-Transaction Order Support
- **Intelligent Grouping**: Automatically groups related transactions by date proximity (within 7 days)
- **Amount Matching**: Matches transaction groups where the sum equals the order total
- **Confidence Scoring**: Uses weighted scoring (amount 50%, date proximity 30%, payee consistency 20%)
- **Consistent Memos**: Updates all related transactions with consistent formatting (e.g., "Charge 1 of 2", "Charge 2 of 2")

### üìä Transaction Matching
- **Single Transaction Matching**: Amount (70%), Date (20%), Payee (10%)
- **Multi-Transaction Matching**: Amount match (50%), Date proximity (30%), Payee consistency (20%)
- **Payee Detection**: Recognizes "WALMART", "WAL-MART", "WALMART.COM", "WALMART ONLINE"
- **Confidence Thresholds**: Only updates high-confidence matches (‚â•80%)

### üìù Memo Formatting
- **Single Transaction**: `[existing memo] | Walmart Order: [order_number] - [product_summary]`
- **Multi-Transaction**: `[existing memo] | Walmart Order: [order_number] (Charge X of Y) - [product_summary]`
- **Order Links**: Includes direct links to Walmart order details pages
- **Memo Preservation**: Preserves existing memo content when appending Walmart information

## Implementation Details

### New Files Created

**Models:**
- `src/main/groovy/com/ynab/amazon/model/WalmartOrder.groovy` - Walmart order data model with support for multiple charge amounts
- `src/main/groovy/com/ynab/amazon/model/WalmartOrderItem.groovy` - Walmart order item model (nested in WalmartOrder.groovy)

**Services:**
- `src/main/groovy/com/ynab/amazon/service/WalmartService.groovy` - Main Walmart service orchestration
- `src/main/groovy/com/ynab/amazon/service/WalmartOrderFetcher.groovy` - Browser automation for fetching orders

**Tests:**
- `src/test/groovy/com/ynab/amazon/service/WalmartService_UT.groovy` - Unit tests for WalmartService
- `src/test/groovy/com/ynab/amazon/service/WalmartOrderFetcher_UT.groovy` - Unit tests for WalmartOrderFetcher
- `src/test/groovy/com/ynab/amazon/service/TransactionMatcher_UT.groovy` - Extended with Walmart matching tests
- `src/test/groovy/com/ynab/amazon/service/TransactionProcessor_UT.groovy` - Extended with Walmart processing tests

### Modified Files

**Core Application:**
- `src/main/groovy/com/ynab/amazon/YNABAmazonTransactionUpdater.groovy` - Integrated Walmart processing workflow
- `src/main/groovy/com/ynab/amazon/config/Configuration.groovy` - Added Walmart configuration fields and validation
- `src/main/groovy/com/ynab/amazon/model/TransactionMatch.groovy` - Extended to support Walmart orders and multi-transaction matches
- `src/main/groovy/com/ynab/amazon/service/TransactionMatcher.groovy` - Added Walmart matching logic (single and multi-transaction)
- `src/main/groovy/com/ynab/amazon/service/TransactionProcessor.groovy` - Added Walmart memo generation and processing

**Build Configuration:**
- `build.gradle` - Added Playwright dependency (com.microsoft.playwright:playwright:1.40.0)

**Documentation:**
- `README.md` - Comprehensive Walmart integration documentation including setup, features, troubleshooting
- `config.example.yml` - Added Walmart configuration section with examples
- `.kiro/steering/product.md` - Updated product overview to reflect multi-retailer support
- `SETUP.md` - Added Walmart configuration example
- `QUICKSTART.md` - Added Walmart as optional prerequisite

## Configuration

New configuration options in `config.yml`:

```yaml
walmart:
  enabled: false  # Set to true to enable Walmart integration
  email: "your_walmart_email@example.com"  # Required if enabled
  password: "your_walmart_password"  # Required if enabled
  browser_timeout: 30000  # Optional: timeout in milliseconds (default: 30000)
  orders_url: "https://www.walmart.com/orders"  # Optional: custom orders URL
```

## Testing

### Unit Tests
- ‚úÖ WalmartService order fetching with mocked fetcher
- ‚úÖ WalmartOrderFetcher HTML parsing and authentication
- ‚úÖ Order status filtering (delivered vs non-delivered)
- ‚úÖ Charge history extraction (final charges only)
- ‚úÖ Single transaction matching for Walmart
- ‚úÖ Multi-transaction matching (2 charges, 3+ charges)
- ‚úÖ Confidence scoring for both matching types
- ‚úÖ Walmart memo generation (single and multi-transaction)
- ‚úÖ Error handling and retry logic

### Integration Tests
- ‚è≥ End-to-end Walmart flow (Task 7.1 - not yet implemented)
- ‚è≥ Mixed Amazon and Walmart order processing
- ‚è≥ Multi-transaction order scenarios

**Note**: Task 7.1 (integration tests) is marked as optional and not yet implemented. The core functionality is fully tested with comprehensive unit tests.

## Architecture Decisions

### Browser Automation Strategy
- **Why Playwright**: Walmart doesn't provide a consumer-facing API, requiring browser automation
- **Headless Mode**: Runs without UI for automated processing
- **Charge History Extraction**: Critical for multi-transaction matching - extracts only final charges, ignoring temporary holds

### Multi-Transaction Matching Algorithm
- **Date Proximity**: Groups transactions within 7 days of each other
- **Amount Summation**: Matches when sum of transactions equals order total
- **Confidence Scoring**: Adjusted weights for multi-transaction scenarios (50/30/20 vs 70/20/10 for single)

### Design Consistency
- Follows existing Amazon integration patterns for maintainability
- Uses same service interface pattern (WalmartService mirrors AmazonService)
- Consistent error handling and logging patterns
- Parallel processing workflow (Walmart after Amazon)

## Breaking Changes

None. This is a purely additive feature:
- Walmart integration is disabled by default (`walmart.enabled: false`)
- Existing Amazon functionality is unchanged
- No changes to existing configuration requirements
- Backward compatible with existing config files

## Security Considerations

- Credentials stored in config.yml (same pattern as Amazon)
- Headless browser mode prevents UI exposure
- Browser cleanup in finally blocks ensures no session leakage
- Configurable timeouts prevent hanging processes
- Sensitive data not logged at INFO level

## Performance Impact

- Browser automation adds ~10-15 seconds per Walmart fetch
- Minimal impact on existing Amazon processing (runs sequentially)
- Browser cleanup ensures no memory leaks
- Configurable timeout prevents indefinite hangs

## Documentation Updates

- **README.md**: Comprehensive Walmart integration guide including:
  - Feature overview and prerequisites
  - Setup instructions with browser automation details
  - Multi-transaction order explanation with examples
  - Matching algorithm documentation
  - Troubleshooting section for Walmart-specific issues
  
- **config.example.yml**: Complete Walmart configuration section with inline documentation

- **Product Documentation**: Updated to reflect multi-retailer support

## Future Enhancements (Not in this PR)

- Order caching to reduce browser automation calls
- Walmart refund support (similar to Amazon)
- Integration tests for end-to-end Walmart flow (Task 7.1)
- Support for additional retailers using the same pattern

## Testing Instructions

1. **Enable Walmart Integration**:
   ```yaml
   walmart:
     enabled: true
     email: "your_walmart_email@example.com"
     password: "your_walmart_password"
   ```

2. **Run in Dry-Run Mode**:
   ```bash
   ./gradlew run
   ```

3. **Verify Output**:
   - Check logs for "Fetching Walmart orders using browser automation"
   - Verify delivered orders are fetched
   - Confirm multi-transaction orders are grouped correctly
   - Review proposed memo updates

4. **Enable Updates**:
   ```yaml
   app:
     dry_run: false
   ```

## Checklist

- [x] Code follows existing patterns and conventions
- [x] Comprehensive unit tests added
- [x] Documentation updated (README, config.example.yml)
- [x] Configuration validation implemented
- [x] Error handling and logging in place
- [x] Backward compatibility maintained
- [x] Build passes successfully
- [ ] Integration tests (Task 7.1 - optional, not implemented)

## Related Issues

Implements requirements from `.kiro/specs/walmart-transaction-support/requirements.md`:
- Requirement 1: Automatic Walmart transaction matching
- Requirement 2: Walmart integration configuration
- Requirement 3: Consistent with Amazon integration patterns
- Requirement 4: Multi-transaction order matching
- Requirement 5: Transaction memos with order links
- Requirement 6: Comprehensive logging and error handling
- Requirement 7: Test coverage (unit tests complete, integration tests pending)
